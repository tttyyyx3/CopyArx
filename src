///////////////
	//----------------------------------------------------------------------------------------------
// - CGDCH04.InsertBlock command (do not rename)
static void CGDCH04InsertBlock(void)
{

//选取块引用插入点
AcGePoint3d basePoint;
if (acedGetPoint(NULL, _T("\n输入插入点： "), asDblArray(basePoint)) != RTNORM)
return;

//创建一个有属性的块定义
AcDbObjectId blockId;
CreateBlockDef (blockId);
//
//新建块引用对象
AcDbBlockReference *pBlkRef = new AcDbBlockReference;
//
//指定块引用所引用的块定义的ID
pBlkRef->setBlockTableRecord(blockId);

AcGeVector3d normal(0.0, 0.0, 1.0);
//
//设置块引用的插入点、旋转角度和向量
pBlkRef->setPosition(basePoint);
pBlkRef->setRotation(0.0);
pBlkRef->setNormal(normal);

//打开当前数据库的模型空间
AcDbBlockTable *pBlockTable;
acdbHostApplicationServices()->workingDatabase()
->getSymbolTable(pBlockTable, AcDb::kForRead);
AcDbBlockTableRecord *pBlockTableRecord;
pBlockTable->getAt(ACDB_MODEL_SPACE, pBlockTableRecord, AcDb::kForWrite);
pBlockTable->close();
//将创建的块引用附加到模型空间块表记录
AcDbObjectId newEntId;
pBlockTableRecord->appendAcDbEntity(newEntId, pBlkRef);
pBlockTableRecord->close();

pBlkRef->close();

}




	// 功能： 求直线的交点和夹角
//
// 作者：Zhao C.X.
//
// 日期：200709
//
// 历史：
// 调整部分代码 BY Qin H.X.
//
//----------------------------------------------------------------------------------------------
// - CGDCH06.GetIntersect command (do not rename)
static void CGDCH06GetIntersect(void)
{

ads_name ename1,ename2;
    ads_point pickpt;
    if (acedEntSel(_T("\n选择直线1: "), ename1, pickpt) != RTNORM)
    {
        acutPrintf(_T("\n选择直线1失败"));
        return ;
    }
    if (acedEntSel(_T("\n选择直线2: "), ename2, pickpt) != RTNORM)
    {
        acutPrintf(_T("\n选择直线2失败"));
        return ;
    }	

AcDbObjectId IdLine1,IdLine2;

acdbGetObjectId(IdLine1, ename1);	
acdbGetObjectId(IdLine2, ename2);
//直线对象
AcDbLine *pLine1 = NULL;	
AcDbLine *pLine2 = NULL;	
//以读方式打开实体
if(Acad::eOk == acdbOpenObject(pLine1, IdLine1, AcDb::kForRead))
{
if(Acad::eOk == acdbOpenObject(pLine2, IdLine2, AcDb::kForRead))
{
//创建几何直线
AcGeLineSeg3d geLineSeg1, geLineSeg2;
geLineSeg1.set(pLine1->startPoint(), pLine1->endPoint());	
geLineSeg2.set(pLine2->startPoint(), pLine2->endPoint());

//求直线的交点
AcGePoint3d ptIntersect;	
//如果两条直线有交点
if (geLineSeg1.intersectWith(geLineSeg2, ptIntersect))	
{
acutPrintf(_T("\n两直线的交点：(%0.2f, %0.2f, %0.2f)"), ptIntersect.x, ptIntersect.y,ptIntersect.z);
}
else
{
acutPrintf(_T("\n直线没有交点。"));
}

///求直线的夹角
AcGeVector3d vect1, vect2;	
vect1 = geLineSeg1.direction();
vect2 = geLineSeg2.direction();
double dAngle;
dAngle = vect1.angleTo(vect2);
dAngle *= 180.0 / PI;
pLine2->close();
acutPrintf(_T("\n直线的夹角为：%0.0f度"), dAngle);

}
//关闭实体
pLine1->close();	

}

}




// 根据块名称获取块定义id
static AcDbObjectId GetBlockDefinitionByName(const CString& blockName)
{
AcDbBlockTable *pBlockTable;
acdbHostApplicationServices()->workingDatabase()->getSymbolTable(pBlockTable, AcDb::kForRead);

AcDbBlockTableRecord *pBlockTableRecord;
Acad::ErrorStatus es = pBlockTable->getAt(blockName, pBlockTableRecord, AcDb::kForRead);
pBlockTable->close();

AcDbObjectId objId;
if(es == Acad::eOk)
{
objId = pBlockTableRecord->objectId();
pBlockTableRecord->close();
}
return objId;
}

static void FillAttribute(const AcStringArray& names, const AcStringArray& attValues, AcDbBlockReference& bRef)
{
// 模仿cad的块插入过程
// 查找所有的属性定义，并以之为模板，创建属性对象
// 并添加到AcDbBlockReference中
AcTransaction* pTrans = actrTransactionManager->startTransaction();
AcDbObject* pObj;
if(Acad::eOk != pTrans->getObject(pObj, bRef.blockTableRecord(), AcDb::kForRead))
{
actrTransactionManager->abortTransaction();
return;
}

AcDbBlockTableRecord* pBTR = AcDbBlockTableRecord::cast(pObj);
// BUG：不能调用hasAttributeDefinitions()方法
// 调用之后，如果没有在块编辑器中对块进行修改，
// 那么进行移动、夹点编辑等操作，没有动态显示效果
//if(!pBTR->hasAttributeDefinitions())
//{
// // 没有属性定义
// acutPrintf(_T("\n没有属性定义"));
// actrTransactionManager->abortTransaction();
// return;
//}

AcDbBlockTableRecordIterator* pIterator;
if(Acad::eOk != pBTR->newIterator(pIterator))
{
actrTransactionManager->abortTransaction();
return;
}

AcGeMatrix3d blkXform = bRef.blockTransform();

// 遍历块中的图元，查找AcDbAttributeDefinition
for(pIterator->start(true); !pIterator->done(); pIterator->step(true))
{
AcDbObjectId objId;
if(Acad::eOk != pIterator->getEntityId(objId)) continue;
if(Acad::eOk != pTrans->getObject(pObj, objId, AcDb::kForRead)) continue;
AcDbAttributeDefinition* pAttDef = AcDbAttributeDefinition::cast(pObj);
if(pAttDef == 0) continue;

// 获取标签名称
ACHAR* pTag = pAttDef->tag();
int pos = names.find(pTag);
if(pos != -1)
{
// 创建属性
AcDbAttribute* pAtt = new AcDbAttribute();
pAtt->setAttributeFromBlock(pAttDef, blkXform);
pAtt->convertIntoMTextAttribute(Adesk::kTrue);

/*
* 属性的图层特性与属性定义保持一致，使用setPropertiesFrom函数实现
* 属性的可见性与属性定义一致
* 属性的高度和角度与属性定义一致
* 属性的插入点：属性定义的插入点与块参照插入点的矢量和
* 属性的标记文字、提示文字与属性定义保持一致
*/
/*
pAtt->setPropertiesFrom(pAttDef);
pAtt->setInvisible(pAttDef->isInvisible());
AcGePoint3d ptBase = pAttDef->position();
ptBase += bRef.position().asVector();
pAtt->setPosition(ptBase);
pAtt->setHeight(pAttDef->height());
pAtt->setRotation(pAttDef->rotation());
ACHAR* pPrompt = pAttDef->prompt();
acutDelString(pPrompt);
*/

// 设置属性数据
pAtt->setTextString(attValues[pos].kACharPtr());
//acutPrintf(_T("\n添加属性%s，值:%s"), pTag, attValues[pos].kACharPtr());

// 添加属性到AcDbBlockReference中
bRef.appendAttribute(pAtt);
}
acutDelString(pTag);
}
delete pIterator;
actrTransactionManager->endTransaction();
}

static AcGeMatrix3d GetBlockTransformMatrix(const AcDbObjectId& blockId, const AcGePoint3d& insertPt, double angle)
{
AcDbBlockReference bRef(insertPt, blockId);
bRef.setRotation(angle);
return bRef.blockTransform();
}



  int iNum = 5;  
        acedInitGet( RSG_NOZERO | RSG_NONEG, NULL );  
        int err = acedGetInt(_T("/n(1-100)<5>:"), &iNum);  
        if (err == RTCAN || iNum < 1 || iNum > 100)  
        {  
            return;  
        }  
        AcGePoint3d centerPoint;  
        if (RTNORM == acedGetPoint(NULL, _T("/n"), asDblArray(centerPoint)))  
        {  
            CMultiCircJig * pJig = new CMultiCircJig(centerPoint, iNum);  
            pJig ->doIt();  
            delete pJig;  
        }  


  // The point we just got is in UCS coordinates, but   
    // AcDbEllipse works in WCS, so convert the point.   
    //   
    rbFrom.restype = RTSHORT;   
    rbFrom.resval.rint = 1; // from UCS   
    rbTo.restype = RTSHORT;   
    rbTo.resval.rint = 0; // to WCS   
   
    acedTrans(asDblArray(tempPt), &rbFrom, &rbTo,   
        Adesk::kFalse, asDblArray(tempPt));   


	acedInitGet(0, _T("Red Green Blue"));
int nReturn;
//取得用户输入的关键字
nReturn = acedGetKword(_T("\n请选择实体的颜色Red/Green/Blue<Red>: "), szKword);
if (nReturn == RTNORM)	//如果得到合理的关键字
{
if (_tcscmp(szKword, _T("Red")) == 0)
acColor.setColorIndex(1);	//红色
else if (_tcscmp(szKword, _T("Blue")) == 0)
acColor.setColorIndex(5);	//蓝色
else
acColor.setColorIndex(3);	//绿色
}
else if (nReturn == RTNONE)	//如果用户输入为空值
{
acColor.setColorIndex(1);	//默认红色
}



	// 创建无模式对话框
CAcModuleResourceOverride resOverride;
//CModelessDialogSteel *
if(!g_pDlgModeless)
{
g_pDlgModeless = new CModelessDialogSteel();
g_pDlgModeless->Create(CModelessDialogSteel::IDD);
g_pDlgModeless->ShowWindow(SW_SHOW);
}
else
{
g_pDlgModeless->ShowWindow(SW_SHOW);
}


sample for crossing polygon.
//...
ads_name ent;
struct resbuf lookAt;
lookAt.restype = 67;
lookAt.resval.rint = model_or_layout() ? 0 : 1; // 0 - modelspase, 1 - current paperspace
lookAt.rbnext = NULL;
if(acedSSGet(_T("_cp"), pointlist, NULL, &lookAt, ent) != RTNORM)
{
acutPrintf(_T("\n terminated by user"));
return;
}

Acad::ErrorStatus es;

//get model space block
AcDbBlockTableRecordPointer pBlockTableRecord(ACDB_MODEL_SPACE, m_pDatabase, AcDb::kForRead);
if((es = pBlockTableRecord.openStatus()) == Acad::eOk)
{
	//loop on each entities in model space
	AcDbBlockTableRecordIterator * pIterator = NULL;
	if((es = pBlockTableRecord->newIterator(pIterator)) == Acad::eOk)
	{
		for(pIterator->start(); !pIterator->done(); pIterator->step())
		{
			if((es = pIterator->getEntityId(entityId)) != Acad::eOk)
				continue;

			//...
		}

		delete pIterator;
	}
}
